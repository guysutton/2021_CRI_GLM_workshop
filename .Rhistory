predict(m0)
df$simple.model <- predict(m0)
# Make plot
df %>%
ggplot(data = ., aes(x = plant_stem_diameter,
y = random.intercept.preds,
colour = site)) +
geom_line() +
geom_line(data = df, aes(x = plant_stem_diameter,
y = simple.model),
linetype = "dashed") +
labs(x = "Stem diameter (cm)",
y = "Insect body length (mm)",
colour = "Site",
subtitle = "Random intercept for site")
# Make plot
df %>%
ggplot(data = ., aes(x = plant_stem_diameter,
y = random.intercept.preds,
colour = site)) +
geom_line() +
geom_line(data = df, aes(x = plant_stem_diameter,
y = simple.model),
linetype = "dashed",
colour = "black") +
labs(x = "Stem diameter (cm)",
y = "Insect body length (mm)",
colour = "Site",
subtitle = "Random intercept for site")
# Make plot
df %>%
ggplot(data = ., aes(x = plant_stem_diameter,
y = random.intercept.preds,
colour = site)) +
geom_line() +
geom_line(data = df, aes(x = plant_stem_diameter,
y = simple.model),
linetype = "dashed",
colour = "black") +
labs(x = "Stem diameter (cm)",
y = "Insect body length (mm)",
colour = "Site",
title = "(a) Random intercept for site")
# Model with varying slope
m2 <- lmer(insect_body_length ~ plant_stem_diameter + (0 + plant_stem_diameter|site),
data=df)
df$random.slope.preds <- predict(m2)
m2 <- lmer(insect_body_length ~ plant_stem_diameter + (0 + plant_stem_diameter|site),
data=df)
df$random.slope.preds <- predict(m2)
# Make plot
df %>%
ggplot(data = ., aes(x = plant_stem_diameter,
y = random.slope.preds,
colour = site)) +
geom_line() +
geom_line(data = df, aes(x = plant_stem_diameter,
y = simple.model),
linetype = "dashed",
colour = "black") +
labs(x = "Stem diameter (cm)",
y = "Insect body length (mm)",
colour = "Site",
title = "(b) insect_body_length ~ plant_stem_diameter + (0 + plant_stem_diameter|site)")
# Null model
m0 <- glm(insect_body_length ~ plant_stem_diameter, data=df)
# Model with varying intercept
m1 <- lmer(insect_body_length ~ plant_stem_diameter + (1|site), data = df)
# Model with varying slope, no intercept
m2 <- lmer(insect_body_length ~ plant_stem_diameter + (0 + plant_stem_diameter|site),
data=df)
# Model with varying slope and intercept
m3 <- lmer(insect_body_length ~ plant_stem_diameter + (1 + plant_stem_diameter|site),
data=df)
# Diagnostics
m0_diag <- DHARMa::simulateResiduals(m0)
plot(m0_diag)
m1_diag <- DHARMa::simulateResiduals(m1)
plot(m1_diag)
m2_diag <- DHARMa::simulateResiduals(m2)
plot(m2_diag)
m3_diag <- DHARMa::simulateResiduals(m3)
plot(m3_diag)
# Diagnostics
hist(df$insect_body_length)
# Model with varying slope and intercept
m4 <- glmer(insect_body_length ~ plant_stem_diameter + (1 + plant_stem_diameter|site),
data=df,
family = Gamma)
m3_diag <- DHARMa::simulateResiduals(m4)
plot(m3_diag)
AICc(m0)
AICc(m1)
AICc(m2)
AICc(m3)
#
anova(m2, m3, test = "Chisq")
# Liklihood ratio test
# - Does random slope & random intercept (m3) provide a better fit than
#   a random slope only (m2)?
anova(m2, m3, test = "Chisq")
# Liklihood ratio test
# - Does random slope & random intercept (m3) provide a better fit than
#   a random intercept only (m1)?
anova(m1, m3, test = "Chisq")
car::Anova(m3)
car::Anova(m3,
test = "II",
test.statistic = "LR")
car::Anova(m3,
test = "II",
test.statistic = "Chisq")
# Assessing parameter significance
car::Anova(m3,
test = "II",
test.statistic = "Chisq")
coef(m3)
fixef(m3)
fixef(conf(m3))
fixef(confint(m3))
confint(m3, method = "boot"))
confint(m3, method = "boot")
# Extract fixed effect parameter estimate
fixef(m3)
# And calculate 95% confidence intervals
confint(m3,
level = 0.95,
method = "boot")
hist(df$insect_body_length)
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
data = df)
# Model with varying intercept
m1 <- lmer(insect_body_length ~
plant_stem_diameter + (1|site),
data = df)
# Model with varying slope, no intercept
m2 <- lmer(insect_body_length ~
plant_stem_diameter +
(0 + plant_stem_diameter|site),
data = df)
# Model with varying slope and intercept
m3 <- lmer(insect_body_length ~
plant_stem_diameter +
(1 + plant_stem_diameter|site),
data = df)
diagnostics <- DHARMa::simulateResiduals(m0)
plot(diagnostics)
diagnostics <- DHARMa::simulateResiduals(m1)
plot(diagnostics)
diagnostics <- DHARMa::simulateResiduals(m2)
plot(diagnostics)
diagnostics <- DHARMa::simulateResiduals(m3)
plot(diagnostics)
diagnostics <- DHARMa::simulateResiduals(m3)
plot(diagnostics)
diagnostics <- DHARMa::simulateResiduals(m3)
plot(diagnostics)
AICc(m0)
AICc(m1)
AICc(m2)
AICc(m3)
anova(m2,
m3,
test = "Chisq")
anova(m2,
m3,
test = "Chisq")
# - Yes. The model with the random intercept & random slope (m3) provided
#   a significantly better fit (X2 = 162.33, P < 0.001) than the
#   model with the random slope only (m2).
# Model with varying slope and intercept
m3 <- lmer(insect_body_length ~
plant_stem_diameter +
(1 + plant_stem_diameter|site),
data = df,
REML = F)
AICc(m3)
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
data = df,
REML = F)
# Model with varying intercept
m1 <- lmer(insect_body_length ~
plant_stem_diameter + (1|site),
data = df,
REML = F)
# Model with varying slope, no intercept
m2 <- lmer(insect_body_length ~
plant_stem_diameter +
(0 + plant_stem_diameter|site),
data = df,
REML = F)
# Model with varying slope and intercept
m3 <- lmer(insect_body_length ~
plant_stem_diameter +
(1 + plant_stem_diameter|site),
data = df,
REML = F)
AICc(m0)
AICc(m1)
AICc(m2)
AICc(m3)
anova(m2,
m3,
test = "Chisq")
anova(m1,
m3,
test = "Chisq")
# Assessing parameter significance
car::Anova(m3,
test = "II",
test.statistic = "Chisq")
# Extract fixed effect parameter estimate
fixef(m3)
# Extract parameter estimates across models
library(dotwhisker)
library(broom.mixed)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed") +
theme_bw() +
geom_vline(xintercept = 0, lty = 2)
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
data = df,
REML = F)
# Model with varying intercept
m1 <- lmer(insect_body_length ~
plant_stem_diameter + (1|site),
data = df,
REML = F)
# Model with varying slope, no intercept
m2 <- lmer(insect_body_length ~
plant_stem_diameter +
(0 + plant_stem_diameter|site),
data = df,
REML = F)
# Model with varying slope and intercept
m3 <- lmer(insect_body_length ~
plant_stem_diameter +
(1 + plant_stem_diameter|site),
data = df,
REML = F)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed") +
theme_bw() +
geom_vline(xintercept = 0, lty = 2)
# Extract fixed effect parameter estimate
fixef(m3)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed")
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3)) +
theme_bw() +
geom_vline(xintercept = 0, lty = 2)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed") +
theme_bw() +
geom_vline(xintercept = 0, lty = 2)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed",
show.intercept = FALSE) +
theme_bw() +
geom_vline(xintercept = 0, lty = 2)
broom.mixed::tidy(m1)
broom.mixed::tidy(m2)
broom.mixed::tidy(m3)
dwplot(list(GLM  = m0,
Random_intercept = m1,
Random_slope     = m2,
Random_intercept_and_slope = m3),
effect = "fixed",
show.intercept = FALSE)
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
family = gaussian(link = "identity"),
data = df,
REML = F)
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
family = gaussian(link = "identity"),
data = df)
# Model with varying intercept
m1 <- lmer(insect_body_length ~
plant_stem_diameter + (1|site),
data = df,
family = gaussian(link = "identity"),
REML = F)
head(df)
dplyr::glimpse(df)
df <- data.frame(ids, site, bases, body_length, raises)
# Generate body masses (base + experience * raise)
df <- df %>%
dplyr::mutate(body_mass = bases + body_length * raises,
body_mass = (body_mass / 10) - 3) %>%
dplyr::select(site,
plant_stem_diameter = body_length,
insect_body_length = body_mass)
# Quick inspection of data
head(df)
dplyr::glimpse(df)
# Quick inspection of data
head(df)
df <- data.frame(ids, site, bases, body_length, raises)
# Generate body masses (base + experience * raise)
df <- df %>%
dplyr::mutate(body_mass = bases + body_length * raises,
body_mass = (body_mass / 10) - 3) %>%
dplyr::select(site,
plant_stem_diameter = body_length,
insect_body_length = body_mass) %>%
tibble::as_tibble()
# Quick inspection of data
head(df)
dplyr::glimpse(df)
# Make plot
df %>%
ggplot(data = ., aes(x = plant_stem_diameter,
y = insect_body_length,
colour = site)) +
geom_point() +
labs(x = "Stem diameter (cm)",
y = "Insect body length (mm)",
colour = "Site")
# Null model (standard Gaussian GLM)
m0 <- glm(insect_body_length ~
plant_stem_diameter,
family = gaussian(link = "identity"),
data = df)
# Model with random intercept
m1 <- lmer(insect_body_length ~
plant_stem_diameter + (1|site),
data = df,
REML = F)
# Model with random slope, no intercept
m2 <- lmer(insect_body_length ~
plant_stem_diameter +
(0 + plant_stem_diameter|site),
data = df,
REML = F)
# Model with random slope and random intercept
m3 <- lmer(insect_body_length ~
plant_stem_diameter +
(1 + plant_stem_diameter|site),
data = df,
REML = F)
data <- data.frame(mass = rnorm(n = 20, mean = 5, sd = 1))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
library(tidyverse)
data <- data.frame(mass = rnorm(n = 20, mean = 5, sd = 1))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
set.seed(2012)
data <- data.frame(mass = rnorm(n = 20, mean = 5, sd = 1))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
# Link function
# - Log of mean body mass
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
set.seed(2012)
data <- data.frame(mass = rnorm(n = 200, mean = 30, sd = 10))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
# Link function
# - Log of mean body mass
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
set.seed(2012)
data <- data.frame(mass = rnorm(n = 200, mean = 30, sd = 10))
head(data)
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
head(data)
# - Mean of log body mass
data %>%
dplyr::rowwise() %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
data %>%
dplyr::rowwise() %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass))
View(data)
set.seed(2012)
data <- data.frame(mass = rnorm(n = 200, mean = 300, sd = 30))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
dplyr::rowwise() %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
# - Mean of log body mass
data %>%
dplyr::rowwise() %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
data <- data.frame(mass = rnorm(n = 200, mean = 300, sd = 50))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
set.seed(2012)
data <- data.frame(mass = rnorm(n = 10, mean = 300, sd = 50))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
# Link function
# - Log of mean body mass
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
data <- data.frame(mass = rpois(n = 20, lambda = 10))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
dplyr::summarise(mean_log_mass = mean(log_mass))
# Link function
# - Log of mean body mass
data %>%
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
head(data)
# Transformed response (log transformation)
# - Mean of log body mass
data %>%
# Apply log transformation
dplyr::mutate(log_mass = log(mass)) %>%
# Calculate mean of log body bass
dplyr::summarise(mean_log_mass = mean(log_mass))
# Link function
# - Log of mean body mass
data %>%
# Calculate the log of mean body mass
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass))
data %>%
# Calculate the log of mean body mass
dplyr::summarise(mean_mass = mean(mass),
log_mean_mass = log(mean_mass)) %>%
dplyr::select(2)
